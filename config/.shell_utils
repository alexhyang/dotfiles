#!/bin/bash
# =========================================================
# SHELL
# =========================================================
# Shell Utilities
showPath() {
  # echo $PATH | sed -E "s/:/\n/g"
  echo $PATH | tr -s ":" "\n"
}

# move files
setDst() {
  echo $(pwd) > ~/.mvDst
}

getDst() {
  cat ~/.mvDst
}

## Search aliases and installed packages using pattern
##   e.g. $ search <pattern>
search() {
  if [[ $# -ne 2 ]]; then
    echo "add flags: -a, alias; -p, ubuntu packages"
  else
    case $1 in
    -a)
      alias | rg $2
      ;;
    -p)
      apt list --installed | rg $2
      ;;
    *)
      echo "no valid flags specified"
      ;;
    esac
  fi
}

## Stage path in git
gaddp() {
  fd "$1" | git add
}

nkg() {
  if [[ $# -eq 1 ]]; then
    bat $1/package.json
  else
    bat package.json
  fi
}

# File Operations
addSuffix() {
  suffix="$1"
  pattern="$2"

  echo "adding suffix: $pattern"
  rename -n "s/(.*)\.(.*)/\1-$suffix\.\2/" *$pattern*
  promptMessage="Confirm rename? [y/N]: "

  if [[ $SHELL == "/usr/bin/zsh" ]]; then
    read "confirm?$promptMessage"
  else
    read -p $promptMessage confirm
  fi

  if [[ $confirm =~ ^[Yy]$ ]]; then
    rename "s/(.*)\.(.*)/\1-$suffix\.\2/" *$pattern*
  else
    echo "rename cancelled"
  fi
}

addPrefix() {
  prefix="$1"
  pattern="$2"

  echo "adding prefix: $prefix"
  rename -n "s/(.*)\.(.*)/$pattern-\1\.\2/" *$prefix*
  promptMessage="Confirm rename? [y/N]: "

  if [[ $SHELL == "/usr/bin/zsh" ]]; then
    read "confirm?$promptMessage"
  else
    read -p $promptMessage confirm
  fi

  if [[ $confirm =~ ^[Yy]$ ]]; then
    rename -n "s/(.*)\.(.*)/$pattern-\1\.\2/" *$prefix*
  else
    echo "rename cancelled"
  fi
}

# =========================================================
# Editor
# =========================================================
nvim-use() {
  switchNvimConfig() {
    if [[ $1 == "" ]]; then
      echo "Provide path to nvim config folder"
    else
      rm ~/.config/nvim
      ln -sfv "$1" ~/.config/nvim
      alias .nvim="cd $(readlink -f ~/.config/nvim)/lua; tree"
    fi
  }

  case $1 in
  "lazy")
    echo "switching to lazyVim config..."
    source="$HOME/.dotfiles/config/LazyVim_nvim"
    switchNvimConfig $source
    ;;
  "vanilla")
    echo "switching to vanillaVim config..."
    source="$HOME/.dotfiles/config/vanilla_nvim"
    switchNvimConfig $source
    ;;
  *)
    echo "use \"lazy\" or \"vanilla\" as argument"
    ;;
  esac
}

# =========================================================
# Project-setup
# =========================================================
cpformatter() {
  cp ~/.dotfiles/config/.editorconfig ./.editorconfig
  cp ~/.dotfiles/config/.prettierrc.js ./.prettierrc.js
}

# =========================================================
# NOTE-TAKING
# =========================================================
# Create md file from template
#   if the argument is only a file name with extension,
#     then it will be created under the current directory;
#   but the argument can also be a full path
mdTemplate() {
  if [[ "$1" == *.md ]]; then
    filepath="$1"
  else
    filepath="$1.md"
  fi
  if [[ -d "$HOME/research-notes" ]]; then
    cp ~/research-notes/template.md $filepath
    echo "$filepath created"
  else
    echo "research notes repo does not exit on local machine"
  fi
}

# View or create README file
readme() {
  if [[ -f "./README.md" ]]; then
    vi ./README.md
  else
    promptMessage="README.md doesn't exit! Create README.md? [y/N]: "
    if [[ $SHELL == "/usr/bin/zsh" ]]; then
      read "confirm?$promptMessage"
    else
      read -p $promptMessage confirm
    fi
    if [[ $confirm =~ ^[Yy]$ ]]; then
      mdTemplate README.md || touch README.md && vi README.md
    fi
  fi
}

# =========================================================
# HELP FILES AND REFERENCES
# =========================================================
# colorized tldr command helps
tl() {
  tldr $1 -t base16 || echo "Install tldr: npm install -g tldr"
}

# List/open/create my personal terminal command helps
# if there is no argument, list available refs
# if ref name is given, open or create markdown file
myrefs() {
  createRef() {
    promptMessage="Create $1? [y/N]"
    if [[ $SHELL == "/usr/bin/zsh" ]]; then
      read "confirm?$promptMessage"
    else
      read -p $promptMessage confirm
    fi

    if [[ $confirm =~ ^[Yy]$ ]]; then
      mdTemplate $1 && vi $1
    fi
  }

  refroot=~/.dotfiles/refs
  if [[ $# -eq 0 && -d $refroot ]]; then
    ls $refroot
  else
    if [[ $# -eq 1 ]]; then
      refname="$1"
    fi
    if [[ $# -eq 2 ]]; then
      flag="$1"
      refname="$2"
    fi

    refpath="$refroot/$refname.md"
    if [[ -f $refpath ]]; then
      case $flag in
      -e)
        vi $refpath
        ;;
      *)
        bat $refpath
        ;;
      esac
    else
      echo "Requested ref doesn't exit!"
      createRef $refpath
    fi
  fi
}

# Drop or publish files
dropNotes() {
  dropbox="$HOME/research-notes/dropbox"
  if [[ ! -f $dropbox/$1 ]]; then
    mv ./$1 $dropbox/$1
  else
    if ! diff $dropbox/$1 ./$1; then
      promptMessage="./$1 --> $dropbox/$1? [y/N]"
      if [[ $SHELL == "/usr/bin/zsh" ]]; then
        read "confirm?$promptMessage"
      else
        read -p $promptMessage confirm
      fi
      if [[ $confirm =~ ^[Yy]$ ]]; then
        mv ./$1 $dropbox/$1
      else
        echo "dropNotes cancelled"
      fi
    else
      echo "No difference between $1 and $dropbox/$1. DropNotes cancelled."
    fi
  fi
}

# =========================================================
#       Programming Languages
# =========================================================
jrun () {
  javac $1.java; java $1
}

crun () {
  gcc -o $1 $1.c; ./$1
}
