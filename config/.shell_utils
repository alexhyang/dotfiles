#!/bin/bash
# =========================================================
# SHELL
# =========================================================
# show environment variable paths
showPath () {
  echo $PATH | sed -E "s/:/\n/g"
}

# search aliases and installed packages using pattern
# e.g. $ search <pattern>
search () {
  if [[ $# -ne 2 ]]; then
    echo "add flags: -a, alias; -p, ubuntu packages"
  else
    case $1 in
      -a)
        alias | rg $2
        ;;
      -p)
        apt list --installed | rg $2
        ;;
       *)
        echo "no valid flags specified"
        ;;
    esac
  fi
}

sfilename () {
  if [[ $# -eq 2 ]]; then
    oldPattern="$1"
    newPattern="$2"
  else
    flag="$1"
    oldPattern="$2"
    newPattern="$3"
  fi

  if [[ "$flag" != "" ]]; then
    case $flag in
      -s)
        echo "adding suffix: $oldPattern";
        rename -n "s/(.*)\.(.*)/\1-$newPattern\.\2/" *$oldPattern*
        promptMessage="Confirm rename? [y/N]: "
        if [[ $SHELL == "/usr/bin/zsh" ]]; then
          read "confirm?$promptMessage"
        else
          read -p $promptMessage confirm
        fi
        if [[ $confirm =~ ^[Yy]$ ]]; then
          rename "s/(.*)\.(.*)/\1-$newPattern\.\2/" *$oldPattern*
        else
          echo "rename cancelled"
        fi
        ;;
      -p)
        echo "adding prefix: $oldPattern";
        rename -n "s/(.*)\.(.*)/$newPattern-\1\.\2/" *$oldPattern*
        promptMessage="Confirm rename? [y/N]: "
        if [[ $SHELL == "/usr/bin/zsh" ]]; then
          read "confirm?$promptMessage"
        else
          read -p $promptMessage confirm
        fi
        if [[ $confirm =~ ^[Yy]$ ]]; then
          rename -n "s/(.*)\.(.*)/$newPattern-\1\.\2/" *$oldPattern*
        else
          echo "rename cancelled"
        fi
        ;;
      *)
        echo "Third argument cannot be empty. Try again."
        ;;
    esac
  else
    rename -n "s/$oldPattern/$newPattern/" *
    promptMessage="Confirm rename? [y/N]: "
    if [[ $SHELL == "/usr/bin/zsh" ]]; then
      read "confirm?$promptMessage"
    else
      read -p $promptMessage confirm
    fi
    if [[ $confirm =~ ^[Yy]$ ]]; then
      rename "s/$oldPattern/$newPattern/" *
    else
      echo "rename cancelled"
    fi
  fi
}

# stage path in git
gaddp () {
  fd "$1" | git add
}

# =========================================================
# NOTE-TAKING
# =========================================================
# create md document using template
createmd () {
  if [[ -d "$HOME/research-notes" ]]; then
    cp ~/research-notes/template.md $1.md;
    echo "$1.md created";
  else
    echo "research notes repo not cloned on local machine";
  fi
}

# view or create README file
readme () {
  if [[ -f "./README.md" ]]; then
    vim ./README.md;
  else
    promptMessage="README.md doesn't exit! Create README.md? [y/N]: "
    if [[ $SHELL == "/usr/bin/zsh" ]]; then
      read "confirm?$promptMessage"
    else
      read -p $promptMessage confirm
    fi
    if [[ $confirm =~ ^[Yy]$ ]]; then
      createmd README || touch README.md && vim README.md;
    fi
  fi
}

# =========================================================
# HELP FILES AND REFERENCES
# =========================================================
# colorized tldr command helps
tl () {
  tldr $1 -t base16 || echo "Install tldr: npm install -g tldr"
}

# open/create my personal command references
myrefs () {
  if [[ $# -eq 1 ]]; then
    refname="$1"
  else
    flag="$1"
    refname="$2"
  fi
  refpath="$HOME/.dotfiles/refs/$refname.md"
  if [[ -f $refpath ]]; then
    case $flag in
      -e)
        vim $refpath
        ;;
      *)
        bat $refpath
        ;;
    esac
  else
    promptMessage="Requested ref doesn't exist! Create $refname.md? [y/N]"
    if [[ $SHELL == "/usr/bin/zsh" ]]; then
      read "confirm?$promptMessage"
    else
      read -p $promptMessage confirm
    fi
    if [[ $confirm =~ ^[Yy]$ ]]; then
      createmd $refname && vim $refpath;
    fi
  fi
}

# drop or publish files
dropNotes () {
  dropbox="$HOME/research-notes/dropbox";
  if [[ ! -f $dropbox/$1 ]]; then
    mv ./$1 $dropbox/$1
  else
    if ! diff $dropbox/$1 ./$1; then
      promptMessage="./$1 --> $dropbox/$1? [y/N]"
      if [[ $SHELL == "/usr/bin/zsh" ]]; then
        read "confirm?$promptMessage"
      else
        read -p $promptMessage confirm
      fi
      if [[ $confirm =~ ^[Yy]$ ]]; then
        mv ./$1 $dropbox/$1
      else
        echo "dropNotes cancelled"
      fi
    else
      echo "No difference between $1 and $dropbox/$1. DropNotes cancelled."
    fi
  fi
}
